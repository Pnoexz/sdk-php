<?php

namespace Tests;

use Pagos360\Models\Adhesion;
use Pagos360\Models\CardAdhesion;
use Pagos360\Models\CardDebitRequest;
use Pagos360\Models\DebitRequest;
use Pagos360\Models\PaymentRequest;
use Pagos360\Repositories\AbstractRepository;
use Pagos360\Repositories\AdhesionRepository;
use Pagos360\Repositories\CardAdhesionRepository;
use Pagos360\Repositories\CardDebitRequestRepository;
use Pagos360\Repositories\DebitRequestRepository;
use Pagos360\Repositories\PaymentRequestRepository;

class AutogeneratedModelsTest extends AbstractTestCase
{
    /**
     * @return array
     */
    public function dataProvider()
    {
        return [
            'PRs' => [
                PaymentRequest::class,
                PaymentRequestRepository::class,
            ],
            'DRs' => [
                DebitRequest::class,
                DebitRequestRepository::class,
            ],
            'Adhesions' => [
                Adhesion::class,
                AdhesionRepository::class,
            ],
            'CardAdhesions' => [
                CardAdhesion::class,
                CardAdhesionRepository::class,
            ],
            'CardDebitRequest' => [
                CardDebitRequest::class,
                CardDebitRequestRepository::class,
            ],
        ];
    }

    /**
     * @test
     * @dataProvider dataProvider
     * @param string $model      Fully qualified name of the model.
     * @param string $repository Fully qualified name of the repository.
     */
    public function assertNoSettersForReadOnlyFields(
        string $model,
        string $repository
    ) {
        /** @var AbstractRepository $repository */
        $readonlyFields = array_filter(
            $repository::FIELDS,
            function ($field) {
                return $field[AbstractRepository::FLAG_READONLY] ?? false;
            }
        );

        foreach ($readonlyFields as $fieldKey => $fieldDefinition) {
            $this->assertFalse(
                method_exists(
                    $model,
                    'set' . ucfirst($fieldKey)
                ),
                "Model $model should not have a setter for attribute $fieldKey"
            );
        }
    }

    /**
     * @test
     * @dataProvider dataProvider
     * @param string $model      Fully qualified name of the model.
     * @param string $repository Fully qualified name of the repository.
     */
    public function assertMaybeFieldsCanReturnNull(
        string $model,
        string $repository
    ) {
        /** @var AbstractRepository $repository */
        $maybeFields = array_filter(
            $repository::FIELDS,
            function ($field) {
                $required = $field[AbstractRepository::FLAG_REQUIRED] ?? false;
                $readonly = $field[AbstractRepository::FLAG_READONLY] ?? false;
                $maybe = $field[AbstractRepository::FLAG_MAYBE] ?? false;
                return (!$readonly && !$required) || $maybe;
            }
        );
        if (count($maybeFields) === 0) {
            // This particular model doesn't have any MAYBE fields, so we return early
            $this->expectNotToPerformAssertions();
            return;
        }

        $getters = [];
        $input = [];
        foreach ($maybeFields as $fieldKey => $fieldDefinition) {
            $getters[] = 'get' . ucfirst($fieldKey);
        }

        $reflection = new $model($input);
        foreach ($getters as $getter) {
            $this->assertNull(
                $reflection->$getter(),
                "Getter in model $model should also return null"
            );
        }
    }
}
